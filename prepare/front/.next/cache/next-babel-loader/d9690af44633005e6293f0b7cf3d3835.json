{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { ConsoleSqlOutlined } from '@ant-design/icons';\nimport { HYDRATE } from 'next-redux-wrapper';\nimport user from './user';\nimport post from './post';\nimport { combineReducers } from 'redux';\nconst initialState = {\n  user: {},\n  post: {}\n}; //action creator\n\nconst rootReducer = combineReducers({\n  index: (state = {}, action) => {\n    switch (action.type) {\n      case HYDRATE:\n        return _objectSpread(_objectSpread({}, state), action.payload);\n\n      default:\n        return state;\n    }\n  },\n  user,\n  post\n});\nexport default rootReducer;","map":{"version":3,"names":["ConsoleSqlOutlined","HYDRATE","user","post","combineReducers","initialState","rootReducer","index","state","action","type","payload"],"sources":["/Users/munseungjun/Documents/react-NodeBird/prepare/front/reducers/index.js"],"sourcesContent":["import { ConsoleSqlOutlined } from '@ant-design/icons';\nimport { HYDRATE } from 'next-redux-wrapper';\n\nimport user from './user';\nimport post from './post';\nimport { combineReducers } from 'redux';\n\nconst initialState = {\n  user: {},\n  post: {},\n};\n\n//action creator\n\nconst rootReducer = combineReducers({\n  index: (state = {}, action) => {\n    switch (action.type) {\n      case HYDRATE:\n        return { ...state, ...action.payload };\n      default:\n        return state;\n    }\n  },\n  user,\n  post,\n});\n\nexport default rootReducer;\n"],"mappings":";;;;;;AAAA,SAASA,kBAAT,QAAmC,mBAAnC;AACA,SAASC,OAAT,QAAwB,oBAAxB;AAEA,OAAOC,IAAP,MAAiB,QAAjB;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,SAASC,eAAT,QAAgC,OAAhC;AAEA,MAAMC,YAAY,GAAG;EACnBH,IAAI,EAAE,EADa;EAEnBC,IAAI,EAAE;AAFa,CAArB,C,CAKA;;AAEA,MAAMG,WAAW,GAAGF,eAAe,CAAC;EAClCG,KAAK,EAAE,CAACC,KAAK,GAAG,EAAT,EAAaC,MAAb,KAAwB;IAC7B,QAAQA,MAAM,CAACC,IAAf;MACE,KAAKT,OAAL;QACE,uCAAYO,KAAZ,GAAsBC,MAAM,CAACE,OAA7B;;MACF;QACE,OAAOH,KAAP;IAJJ;EAMD,CARiC;EASlCN,IATkC;EAUlCC;AAVkC,CAAD,CAAnC;AAaA,eAAeG,WAAf"},"metadata":{},"sourceType":"module"}