{"ast":null,"code":"import { all, fork, put, takeLatest, delay, throttle } from 'redux-saga/effects';\nimport { ADD_POST_FAILURE, ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE, REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS, REMOVE_POST_FAILURE, LOAD_POSTS_REQUEST, LOAD_POSTS_FAILURE, LOAD_POSTS_SUCCESS, generateDummyPost } from '../reducers/post';\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from '../reducers/user';\nimport shortId, { generate } from 'shortid';\n\nfunction loadPostsAPI(data) {\n  return axios.get('/api/posts', data);\n}\n\nfunction* loadPosts(action) {\n  try {\n    yield delay(1000);\n    const id = shortId.generate();\n    yield put({\n      type: LOAD_POSTS_SUCCESS,\n      data: generateDummyPost(10)\n    });\n  } catch (err) {\n    console.log('error');\n    yield put({\n      type: LOAD_POSTS_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction addPostAPI(data) {\n  return axios.post('/api/post', data);\n}\n\nfunction* addPost(action) {\n  try {\n    yield delay(1000);\n    const id = shortId.generate();\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: {\n        id,\n        content: action.data\n      }\n    });\n    yield put({\n      type: ADD_POST_TO_ME,\n      data: id\n    });\n  } catch (err) {\n    console.log('error');\n    yield put({\n      type: ADD_POST_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction removePostAPI(data) {\n  return axios.post('/api/post', data);\n}\n\nfunction* removePost(action) {\n  try {\n    yield delay(1000);\n    const id = shortId.generate();\n    yield put({\n      type: REMOVE_POST_SUCCESS,\n      data: action.data\n    });\n    yield put({\n      type: REMOVE_POST_OF_ME,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: REMOVE_POST_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction addCommentAPI(data) {\n  return axios.post(`/api/post/${data.postId}/comment`, data);\n}\n\nfunction* addComment(action) {\n  try {\n    yield delay(1000); // const result = yield call(addPostAPI, action.data);\n\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction* watchLoadPosts() {\n  yield throttle(2000, LOAD_POSTS_REQUEST, loadPosts);\n}\n\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\n\nfunction* watchRemovePost() {\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\n}\n\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n\nexport default function* postSaga() {\n  yield all([fork(watchAddPost), fork(watchLoadPosts), fork(watchRemovePost), fork(watchAddComment)]);\n}","map":{"version":3,"names":["all","fork","put","takeLatest","delay","throttle","ADD_POST_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","LOAD_POSTS_REQUEST","LOAD_POSTS_FAILURE","LOAD_POSTS_SUCCESS","generateDummyPost","ADD_POST_TO_ME","REMOVE_POST_OF_ME","shortId","generate","loadPostsAPI","data","axios","get","loadPosts","action","id","type","err","console","log","response","addPostAPI","post","addPost","content","removePostAPI","removePost","addCommentAPI","postId","addComment","watchLoadPosts","watchAddPost","watchRemovePost","watchAddComment","postSaga"],"sources":["/Users/munseungjun/Documents/react-NodeBird/prepare/front/sagas/post.js"],"sourcesContent":["import {\n  all,\n  fork,\n  put,\n  takeLatest,\n  delay,\n  throttle,\n} from 'redux-saga/effects';\nimport {\n  ADD_POST_FAILURE,\n  ADD_POST_REQUEST,\n  ADD_POST_SUCCESS,\n  ADD_COMMENT_REQUEST,\n  ADD_COMMENT_SUCCESS,\n  ADD_COMMENT_FAILURE,\n  REMOVE_POST_REQUEST,\n  REMOVE_POST_SUCCESS,\n  REMOVE_POST_FAILURE,\n  LOAD_POSTS_REQUEST,\n  LOAD_POSTS_FAILURE,\n  LOAD_POSTS_SUCCESS,\n  generateDummyPost,\n} from '../reducers/post';\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from '../reducers/user';\nimport shortId, { generate } from 'shortid';\n\nfunction loadPostsAPI(data) {\n  return axios.get('/api/posts', data);\n}\n\nfunction* loadPosts(action) {\n  try {\n    yield delay(1000);\n    const id = shortId.generate();\n    yield put({\n      type: LOAD_POSTS_SUCCESS,\n      data: generateDummyPost(10),\n    });\n  } catch (err) {\n    console.log('error');\n    yield put({\n      type: LOAD_POSTS_FAILURE,\n      data: err.response.data,\n    });\n  }\n}\n\nfunction addPostAPI(data) {\n  return axios.post('/api/post', data);\n}\n\nfunction* addPost(action) {\n  try {\n    yield delay(1000);\n    const id = shortId.generate();\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: {\n        id,\n        content: action.data,\n      },\n    });\n    yield put({\n      type: ADD_POST_TO_ME,\n      data: id,\n    });\n  } catch (err) {\n    console.log('error');\n    yield put({\n      type: ADD_POST_FAILURE,\n      data: err.response.data,\n    });\n  }\n}\n\nfunction removePostAPI(data) {\n  return axios.post('/api/post', data);\n}\n\nfunction* removePost(action) {\n  try {\n    yield delay(1000);\n    const id = shortId.generate();\n    yield put({\n      type: REMOVE_POST_SUCCESS,\n      data: action.data,\n    });\n    yield put({\n      type: REMOVE_POST_OF_ME,\n      data: action.data,\n    });\n  } catch (err) {\n    yield put({\n      type: REMOVE_POST_FAILURE,\n      data: err.response.data,\n    });\n  }\n}\n\nfunction addCommentAPI(data) {\n  return axios.post(`/api/post/${data.postId}/comment`, data);\n}\n\nfunction* addComment(action) {\n  try {\n    yield delay(1000);\n    // const result = yield call(addPostAPI, action.data);\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: action.data,\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      data: err.response.data,\n    });\n  }\n}\n\nfunction* watchLoadPosts() {\n  yield throttle(2000, LOAD_POSTS_REQUEST, loadPosts);\n}\n\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\n\nfunction* watchRemovePost() {\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\n}\n\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n\nexport default function* postSaga() {\n  yield all([\n    fork(watchAddPost),\n    fork(watchLoadPosts),\n    fork(watchRemovePost),\n    fork(watchAddComment),\n  ]);\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}