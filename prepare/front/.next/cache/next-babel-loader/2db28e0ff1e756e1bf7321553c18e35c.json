{"ast":null,"code":"import { all, fork, put, takeLatest, delay } from 'redux-saga/effects';\nimport { ADD_POST_FAILURE, ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE, REMOVE_POST_SUCCESS, REMOVE_POST_FAILURE } from '../reducers/post';\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from '../reducers/user';\nimport shortId from 'shortId';\n\nfunction addPostAPI(data) {\n  return axios.post('/api/post', data);\n}\n\nfunction* addPost(action) {\n  try {\n    yield delay(1000);\n    const id = shortId.generate();\n    console.log('add');\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: {\n        id,\n        content: action.data\n      }\n    });\n    yield put({\n      type: ADD_POST_TO_ME,\n      data: id\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_POST_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction removePostAPI(data) {\n  return axios.post('/api/post', data);\n}\n\nfunction* removePost(action) {\n  try {\n    yield delay(1000);\n    const id = shortId.generate();\n    yield put({\n      type: REMOVE_POST_SUCCESS,\n      data: action.data\n    });\n    yield put({\n      type: REMOVE_POST_OF_ME,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: REMOVE_POST_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction addCommentAPI(data) {\n  return axios.post(`/api/post/${data.postId}/comment`, data);\n}\n\nfunction* addComment(action) {\n  try {\n    yield delay(1000); // const result = yield call(addPostAPI, action.data);\n\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\n\nfunction* watchRemovePost() {\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\n}\n\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n\nexport default function* postSaga() {\n  yield all([fork(watchAddPost), fork(watchAddComment), fork(watchRemovePost)]);\n}","map":{"version":3,"names":["all","fork","put","takeLatest","delay","ADD_POST_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","ADD_POST_TO_ME","REMOVE_POST_OF_ME","shortId","addPostAPI","data","axios","post","addPost","action","id","generate","console","log","type","content","err","response","removePostAPI","removePost","addCommentAPI","postId","addComment","watchAddPost","watchRemovePost","REMOVE_POST_REQUEST","watchAddComment","postSaga"],"sources":["/Users/munseungjun/Documents/react-NodeBird/prepare/front/sagas/post.js"],"sourcesContent":["import { all, fork, put, takeLatest, delay } from 'redux-saga/effects';\nimport {\n  ADD_POST_FAILURE,\n  ADD_POST_REQUEST,\n  ADD_POST_SUCCESS,\n  ADD_COMMENT_REQUEST,\n  ADD_COMMENT_SUCCESS,\n  ADD_COMMENT_FAILURE,\n  REMOVE_POST_SUCCESS,\n  REMOVE_POST_FAILURE,\n} from '../reducers/post';\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from '../reducers/user';\nimport shortId from 'shortId';\n\nfunction addPostAPI(data) {\n  return axios.post('/api/post', data);\n}\n\nfunction* addPost(action) {\n  try {\n    yield delay(1000);\n    const id = shortId.generate();\n    console.log('add');\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: {\n        id,\n        content: action.data,\n      },\n    });\n    yield put({\n      type: ADD_POST_TO_ME,\n      data: id,\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_POST_FAILURE,\n      data: err.response.data,\n    });\n  }\n}\n\nfunction removePostAPI(data) {\n  return axios.post('/api/post', data);\n}\n\nfunction* removePost(action) {\n  try {\n    yield delay(1000);\n    const id = shortId.generate();\n    yield put({\n      type: REMOVE_POST_SUCCESS,\n      data: action.data,\n    });\n    yield put({\n      type: REMOVE_POST_OF_ME,\n      data: action.data,\n    });\n  } catch (err) {\n    yield put({\n      type: REMOVE_POST_FAILURE,\n      data: err.response.data,\n    });\n  }\n}\n\nfunction addCommentAPI(data) {\n  return axios.post(`/api/post/${data.postId}/comment`, data);\n}\n\nfunction* addComment(action) {\n  try {\n    yield delay(1000);\n    // const result = yield call(addPostAPI, action.data);\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: action.data,\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      data: err.response.data,\n    });\n  }\n}\n\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\n\nfunction* watchRemovePost() {\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\n}\n\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n\nexport default function* postSaga() {\n  yield all([fork(watchAddPost), fork(watchAddComment), fork(watchRemovePost)]);\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}