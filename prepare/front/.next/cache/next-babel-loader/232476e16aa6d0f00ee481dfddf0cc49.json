{"ast":null,"code":"import { all, fork, put, takeLatest, delay, throttle, call } from 'redux-saga/effects';\nimport { ADD_POST_FAILURE, ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE, REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS, REMOVE_POST_FAILURE, LOAD_POSTS_REQUEST, LOAD_POSTS_FAILURE, LOAD_POSTS_SUCCESS } from '../reducers/post';\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from '../reducers/user';\nimport shortId, { generate } from 'shortid';\n\nfunction loadPostsAPI(data) {\n  return axios.get('/api/posts', data);\n}\n\nfunction* loadPosts(action) {\n  try {\n    yield delay(1000);\n    const id = shortId.generate();\n    yield put({\n      type: LOAD_POSTS_SUCCESS,\n      data: generateDummyPost(10)\n    });\n  } catch (err) {\n    console.log('error');\n    yield put({\n      type: LOAD_POSTS_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction addPostAPI(data) {\n  return axios.post('/post', {\n    content: data\n  });\n}\n\nfunction* addPost(action) {\n  try {\n    const result = yield call(addPostAPI, action.data);\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: result.data\n    });\n    yield put({\n      type: ADD_POST_TO_ME,\n      data: result.data.id\n    });\n  } catch (err) {\n    console.log('error');\n    yield put({\n      type: ADD_POST_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction removePostAPI(data) {\n  return axios.post('/api/post', data);\n}\n\nfunction* removePost(action) {\n  try {\n    yield delay(1000);\n    const id = shortId.generate();\n    yield put({\n      type: REMOVE_POST_SUCCESS,\n      data: action.data\n    });\n    yield put({\n      type: REMOVE_POST_OF_ME,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: REMOVE_POST_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction addCommentAPI(data) {\n  return axios.post(`/post/${data.postId}/comment`, data);\n}\n\nfunction* addComment(action) {\n  try {\n    const result = yield call(addCommentAPI, action.data);\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction* watchLoadPosts() {\n  yield takeLatest(LOAD_POSTS_REQUEST, loadPosts);\n}\n\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\n\nfunction* watchRemovePost() {\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\n}\n\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n\nexport default function* postSaga() {\n  yield all([fork(watchAddPost), fork(watchLoadPosts), fork(watchRemovePost), fork(watchAddComment)]);\n}","map":{"version":3,"names":["all","fork","put","takeLatest","delay","throttle","call","ADD_POST_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","LOAD_POSTS_REQUEST","LOAD_POSTS_FAILURE","LOAD_POSTS_SUCCESS","ADD_POST_TO_ME","REMOVE_POST_OF_ME","shortId","generate","loadPostsAPI","data","axios","get","loadPosts","action","id","type","generateDummyPost","err","console","log","response","addPostAPI","post","content","addPost","result","removePostAPI","removePost","addCommentAPI","postId","addComment","watchLoadPosts","watchAddPost","watchRemovePost","watchAddComment","postSaga"],"sources":["/Users/munseungjun/Documents/react-NodeBird/prepare/front/sagas/post.js"],"sourcesContent":["import {\n  all,\n  fork,\n  put,\n  takeLatest,\n  delay,\n  throttle,\n  call,\n} from 'redux-saga/effects';\nimport {\n  ADD_POST_FAILURE,\n  ADD_POST_REQUEST,\n  ADD_POST_SUCCESS,\n  ADD_COMMENT_REQUEST,\n  ADD_COMMENT_SUCCESS,\n  ADD_COMMENT_FAILURE,\n  REMOVE_POST_REQUEST,\n  REMOVE_POST_SUCCESS,\n  REMOVE_POST_FAILURE,\n  LOAD_POSTS_REQUEST,\n  LOAD_POSTS_FAILURE,\n  LOAD_POSTS_SUCCESS,\n} from '../reducers/post';\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from '../reducers/user';\nimport shortId, { generate } from 'shortid';\n\nfunction loadPostsAPI(data) {\n  return axios.get('/api/posts', data);\n}\n\nfunction* loadPosts(action) {\n  try {\n    yield delay(1000);\n    const id = shortId.generate();\n    yield put({\n      type: LOAD_POSTS_SUCCESS,\n      data: generateDummyPost(10),\n    });\n  } catch (err) {\n    console.log('error');\n    yield put({\n      type: LOAD_POSTS_FAILURE,\n      data: err.response.data,\n    });\n  }\n}\n\nfunction addPostAPI(data) {\n  return axios.post('/post', { content: data });\n}\n\nfunction* addPost(action) {\n  try {\n    const result = yield call(addPostAPI, action.data);\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: result.data,\n    });\n    yield put({\n      type: ADD_POST_TO_ME,\n      data: result.data.id,\n    });\n  } catch (err) {\n    console.log('error');\n    yield put({\n      type: ADD_POST_FAILURE,\n      data: err.response.data,\n    });\n  }\n}\n\nfunction removePostAPI(data) {\n  return axios.post('/api/post', data);\n}\n\nfunction* removePost(action) {\n  try {\n    yield delay(1000);\n    const id = shortId.generate();\n    yield put({\n      type: REMOVE_POST_SUCCESS,\n      data: action.data,\n    });\n    yield put({\n      type: REMOVE_POST_OF_ME,\n      data: action.data,\n    });\n  } catch (err) {\n    yield put({\n      type: REMOVE_POST_FAILURE,\n      data: err.response.data,\n    });\n  }\n}\n\nfunction addCommentAPI(data) {\n  return axios.post(`/post/${data.postId}/comment`, data);\n}\n\nfunction* addComment(action) {\n  try {\n    const result = yield call(addCommentAPI, action.data);\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: result.data,\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      data: err.response.data,\n    });\n  }\n}\n\nfunction* watchLoadPosts() {\n  yield takeLatest(LOAD_POSTS_REQUEST, loadPosts);\n}\n\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\n\nfunction* watchRemovePost() {\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\n}\n\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n\nexport default function* postSaga() {\n  yield all([\n    fork(watchAddPost),\n    fork(watchLoadPosts),\n    fork(watchRemovePost),\n    fork(watchAddComment),\n  ]);\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}